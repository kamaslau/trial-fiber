name: Deploy with docker

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Test, Build and store Docker image"]
    branches: [main]
    types: [completed]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ vars.REGISTRY || 'ghcr.io'}}
  APP_NAME: ${{ vars.APP_NAME || github.event.repository.name }}
  APP_PORT: ${{ vars.APP_PORT || 3000 }}
  APP_NETWORK: ${{ vars.APP_NETWORK || 'apps' }}
  DOCKER_CLI_EXPERIMENTAL: enabled

jobs:
  pull-and-run:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: production
    permissions:
      packages: read
      contents: read
      actions: read
      id-token: write

    steps:
      - name: Pull and run Docker image
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          script: |
            set -e
            echo "::group::Docker Deployment"

            # 确保 Docker 网络存在
            docker network inspect ${{ env.APP_NETWORK }} >/dev/null 2>&1 || docker network create ${{ env.APP_NETWORK }}

            # 登录到容器注册表
            if ! docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USER || github.actor }} -p ${{ secrets.REGISTRY_TOKEN || secrets.GITHUB_TOKEN }}; then
              echo "::error::Failed to login to container registry"
              exit 1
            fi

            # 拉取最新镜像
            if ! docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest; then
              echo "::error::Failed to pull image"
              exit 1
            fi

            # 停止并移除旧容器
            if [ -n "$(docker ps -aq --filter name=${{ env.APP_NAME }})" ]; then
              echo "Stopping and removing existing container..."
              docker stop ${{ env.APP_NAME }}
              docker rm ${{ env.APP_NAME }}
            fi

            docker run --name ${{ env.APP_NAME }} --network ${{ env.APP_NETWORK }} -p ${{ env.APP_PORT }}:3000 -d --restart always ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}

            # 移除悬空镜像
            if [ -n "$(docker images -q --filter dangling=true)" ]; then
              docker rmi $(docker images -q --filter dangling=true)
            fi

            # 清理未使用的镜像
            echo "Cleaning up unused images..."
            docker image prune -f --filter "until=24h"

            echo "::endgroup::"
